/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_gsl4j_polynom_PolynomialMath */

#ifndef _Included_org_gsl4j_polynom_PolynomialMath
#define _Included_org_gsl4j_polynom_PolynomialMath
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    eval
 * Signature: ([DD)D
 */
JNIEXPORT jdouble JNICALL Java_org_gsl4j_polynom_PolynomialMath_eval___3DD
  (JNIEnv *, jclass, jdoubleArray, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    eval
 * Signature: ([DDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_eval___3DDD
  (JNIEnv *, jclass, jdoubleArray, jdouble, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    eval
 * Signature: ([D[DDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_eval___3D_3DDD
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray, jdouble, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    evalDerivs
 * Signature: ([DID)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_evalDerivs
  (JNIEnv *, jclass, jdoubleArray, jint, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    solveQuadraticRealRoots
 * Signature: (DDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_solveQuadraticRealRoots
  (JNIEnv *, jclass, jdouble, jdouble, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    solveQuadraticComplexRoots
 * Signature: (DDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_solveQuadraticComplexRoots
  (JNIEnv *, jclass, jdouble, jdouble, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    solveCubicRealRoots
 * Signature: (DDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_solveCubicRealRoots
  (JNIEnv *, jclass, jdouble, jdouble, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    solveCubicComplexRoots
 * Signature: (DDD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_solveCubicComplexRoots
  (JNIEnv *, jclass, jdouble, jdouble, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    solvePolynomialComplexRoots
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_solvePolynomialComplexRoots
  (JNIEnv *, jclass, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    plus
 * Signature: ([D[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_plus___3D_3D
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    minus
 * Signature: ([D[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_minus___3D_3D
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    times
 * Signature: ([D[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_times___3D_3D
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    compose
 * Signature: ([D[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_compose
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    plus
 * Signature: ([DD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_plus___3DD
  (JNIEnv *, jclass, jdoubleArray, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    minus
 * Signature: ([DD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_minus___3DD
  (JNIEnv *, jclass, jdoubleArray, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    times
 * Signature: ([DD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_times___3DD
  (JNIEnv *, jclass, jdoubleArray, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    divides
 * Signature: ([DD)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_divides
  (JNIEnv *, jclass, jdoubleArray, jdouble);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    reduce
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_reduce
  (JNIEnv *, jclass, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    ofRoots
 * Signature: ([D[D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_ofRoots
  (JNIEnv *, jclass, jdoubleArray, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    pow
 * Signature: ([DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_pow
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    diff
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_diff___3D
  (JNIEnv *, jclass, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    diff
 * Signature: ([DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_diff___3DI
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    integrate
 * Signature: ([D)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_integrate___3D
  (JNIEnv *, jclass, jdoubleArray);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    integrate
 * Signature: ([DI)[D
 */
JNIEXPORT jdoubleArray JNICALL Java_org_gsl4j_polynom_PolynomialMath_integrate___3DI
  (JNIEnv *, jclass, jdoubleArray, jint);

/*
 * Class:     org_gsl4j_polynom_PolynomialMath
 * Method:    integrate
 * Signature: ([DDD)D
 */
JNIEXPORT jdouble JNICALL Java_org_gsl4j_polynom_PolynomialMath_integrate___3DDD
  (JNIEnv *, jclass, jdoubleArray, jdouble, jdouble);

#ifdef __cplusplus
}
#endif
#endif
